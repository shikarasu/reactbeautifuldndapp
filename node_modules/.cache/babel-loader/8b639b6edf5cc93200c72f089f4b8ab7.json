{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code Projects\\\\task-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        taskIds: newTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, this.state.columnOrder.map(columnId => {\n      const column = this.state.columns[columnId];\n      const tasks = column.taskIds.map(taskId => this.state.task[taskId]);\n      return React.createElement(Column, {\n        key: column.id,\n        column: column,\n        tasks: tasks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Code Projects/task-app/src/index.js"],"names":["React","ReactDOM","DragDropContext","initialData","Column","App","Component","state","onDragEnd","result","destination","source","draggableId","droppableId","index","column","columns","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","render","columnOrder","map","columnId","tasks","taskId","task","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,qBAAP;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BC,KAD8B,GACtBJ,WADsB;;AAAA,SAG9BK,SAH8B,GAGlBC,MAAM,IAAI;AAClB,YAAM;AAACC,QAAAA,WAAD;AAAcC,QAAAA,MAAd;AAAsBC,QAAAA;AAAtB,UAAqCH,MAA3C;;AAEA,UAAG,CAACC,WAAJ,EAAgB;AACZ;AACH;;AACD,UACIA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IAAkDH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KADnF,EAEC;AACG;AACH;;AAED,YAAMC,MAAM,GAAG,KAAKR,KAAL,CAAWS,OAAX,CAAmBL,MAAM,CAACE,WAA1B,CAAf;AACA,YAAMI,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,OAAlB,CAAnB;AACAH,MAAAA,UAAU,CAACI,MAAX,CAAkBV,MAAM,CAACG,KAAzB,EAAgC,CAAhC;AACAG,MAAAA,UAAU,CAACI,MAAX,CAAkBX,WAAW,CAACI,KAA9B,EAAqC,CAArC,EAAwCF,WAAxC;AAEA,YAAMU,SAAS,GAAG,EACd,GAAGP,MADW;AAEdK,QAAAA,OAAO,EAAEH;AAFK,OAAlB;AAKA,YAAMM,QAAQ,GAAG,EACb,GAAG,KAAKhB,KADK;AAEbS,QAAAA,OAAO,EAAE,EACL,GAAG,KAAKT,KAAL,CAAWS,OADT;AAEL,WAACM,SAAS,CAACE,EAAX,GAAgBF;AAFX;AAFI,OAAjB;AAOA,WAAKG,QAAL,CAAcF,QAAd;AACH,KAjC6B;AAAA;;AAmC9BG,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKlB,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKD,KAAL,CAAWoB,WAAX,CAAuBC,GAAvB,CAA2BC,QAAQ,IAAI;AACxC,YAAMd,MAAM,GAAG,KAAKR,KAAL,CAAWS,OAAX,CAAmBa,QAAnB,CAAf;AACA,YAAMC,KAAK,GAAGf,MAAM,CAACK,OAAP,CAAeQ,GAAf,CAAmBG,MAAM,IAAI,KAAKxB,KAAL,CAAWyB,IAAX,CAAgBD,MAAhB,CAA7B,CAAd;AAEI,aAAO,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEhB,MAAM,CAACS,EAApB;AAAwB,QAAA,MAAM,EAAET,MAAhC;AAAwC,QAAA,KAAK,EAAEe,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACP,KALI,CADD,CADJ;AAUH;;AA9C6B;;AAiDlC7B,QAAQ,CAACyB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBO,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nclass App extends React.Component {\n    state = initialData;\n\n    onDragEnd = result => {\n        const {destination, source, draggableId} = result;\n\n        if(!destination){\n            return;\n        }\n        if(\n            destination.droppableId === source.droppableId && destination.index === source.index\n        ){\n            return;\n        }\n\n        const column = this.state.columns[source.droppableId];\n        const newTaskIds = Array.from(column.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        const newColumn = {\n            ...column,\n            taskIds: newTaskIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newColumn.id]: newColumn,\n            }\n        }\n        this.setState(newState);\n    };\n\n    render(){\n        return ( \n            <DragDropContext onDragEnd={this.onDragEnd}>\n            {this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(taskId => this.state.task[taskId]);\n                \n                return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n        </DragDropContext>\n        );\n    }\n\n}\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}