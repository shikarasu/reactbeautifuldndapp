{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code Projects\\\\task-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDrageEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1);\n    };\n  }\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, this.state.columnOrder.map(columnId => {\n      const column = this.state.columns[columnId];\n      const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      return React.createElement(Column, {\n        key: column.Id,\n        column: column,\n        tasks: tasks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Code Projects/task-app/src/index.js"],"names":["React","ReactDOM","DragDropContext","initialData","Column","App","Component","state","onDrageEnd","result","destination","source","draggableId","droppableId","index","column","columns","newTaskIds","Array","from","taskIds","splice","render","onDragEnd","columnOrder","map","columnId","tasks","taskId","Id","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,qBAAP;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CACA;AAAA;AAAA;AAAA,SACIC,KADJ,GACYJ,WADZ;;AAAA,SAGIK,UAHJ,GAGiBC,MAAM,IAAI;AACnB,YAAM;AAACC,QAAAA,WAAD;AAAcC,QAAAA,MAAd;AAAsBC,QAAAA;AAAtB,UAAqCH,MAA3C;;AAEA,UAAG,CAACC,WAAJ,EAAgB;AACZ;AACH;;AACD,UACIA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IAAkDH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KADnF,EAEC;AACG;AACH;;AAED,YAAMC,MAAM,GAAG,KAAKR,KAAL,CAAWS,OAAX,CAAmBL,MAAM,CAACE,WAA1B,CAAf;AACA,YAAMI,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,OAAlB,CAAnB;AACAH,MAAAA,UAAU,CAACI,MAAX,CAAkBV,MAAM,CAACG,KAAzB,EAAgC,CAAhC;AACH,KAlBL;AAAA;;AAoBIQ,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKhB,KAAL,CAAWiB,WAAX,CAAuBC,GAAvB,CAA2BC,QAAQ,IAAI;AACxC,YAAMX,MAAM,GAAG,KAAKR,KAAL,CAAWS,OAAX,CAAmBU,QAAnB,CAAf;AACA,YAAMC,KAAK,GAAGZ,MAAM,CAACK,OAAP,CAAeK,GAAf,CAAmBG,MAAM,IAAI,KAAKrB,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAA7B,CAAd;AAEI,aAAO,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEb,MAAM,CAACc,EAApB;AAAwB,QAAA,MAAM,EAAEd,MAAhC;AAAwC,QAAA,KAAK,EAAEY,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACP,KALI,CADD,CADJ;AAUH;;AA/BL;;AAkCA1B,QAAQ,CAACqB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nclass App extends React.Component\n{\n    state = initialData;\n\n    onDrageEnd = result => {\n        const {destination, source, draggableId} = result;\n\n        if(!destination){\n            return;\n        }\n        if(\n            destination.droppableId === source.droppableId && destination.index === source.index\n        ){\n            return;\n        }\n\n        const column = this.state.columns[source.droppableId];\n        const newTaskIds = Array.from(column.taskIds);\n        newTaskIds.splice(source.index, 1);\n    };\n\n    render(){\n        return ( \n            <DragDropContext onDragEnd={this.onDragEnd}>\n            {this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                \n                return <Column key={column.Id} column={column} tasks={tasks} />;\n        })}\n        </DragDropContext>\n        );\n    }\n\n}\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}